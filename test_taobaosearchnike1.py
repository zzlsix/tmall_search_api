# Generated by Selenium IDE
import random
import pymysql
import time
from selenium.webdriver.chrome.options import Options
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.common.exceptions import TimeoutException
from decimal import Decimal

class TestTaobaosearchnike1():
  def setup_method(self):
    options = Options()
    options.add_experimental_option("debuggerAddress", "127.0.0.1:9222")
    self.driver = webdriver.Chrome(options=options)
    self.vars = {}
    # 配置数据库连接参数
    self.db_config = {
      'host': '127.0.0.1',
      'user': 'root',
      'password': '112203',
      'database': 'taobao_search',
      'port': 3306
    }
    # 创建数据库连接
    self.connection = pymysql.connect(**self.db_config)
    self.cursor = self.connection.cursor()
  
  def teardown_method(self):
    self.driver.quit()
    # 关闭数据库连接
    self.connection.close()

  def insert_into_item(self, one_href, item_title, item_sale, item_price):
    try:
      # 执行插入操作
      insert_sql = "INSERT INTO item (item_url, title, sale, price) VALUES (%s, %s, %s, %s)"
      data = (one_href, item_title, item_sale, item_price)
      self.cursor.execute(insert_sql, data)
      # 获取刚刚插入的自增主键值
      self.cursor.execute("SELECT LAST_INSERT_ID()")
      last_inserted_id = self.cursor.fetchone()[0]
      print("-DB- insert item and Last inserted ID:", last_inserted_id)
      # 提交事务
      self.connection.commit()
      return last_inserted_id
    except Exception as e:
      print("Error inserting item into database:", e)
      # 回滚事务
      self.connection.rollback()

  def insert_into_details(self, item_id, details):
    try:
      # 执行批量插入操作
      insert_sql = "INSERT INTO detail (item_id, detail) VALUES (%s, %s)"
      data = [(item_id, detail) for detail in details]
      self.cursor.executemany(insert_sql, data)
      # 提交事务
      self.connection.commit()
    except Exception as e:
      print("Error inserting details into database:", e)
      # 回滚事务
      self.connection.rollback()

  def insert_into_comment(self, item_id, comments):
    try:
      # 执行批量插入操作
      insert_sql = "INSERT INTO comment (item_id, comment) VALUES (%s, %s)"
      data = [(item_id, comment) for comment in comments]
      self.cursor.executemany(insert_sql, data)
      # 提交事务
      self.connection.commit()
    except Exception as e:
      print("Error inserting details into database:", e)
      # 回滚事务
      self.connection.rollback()

  def test_taobaosearchnike1(self):
    print("start")
    self.driver.get("https://login.taobao.com/member/login.jhtml")
    # # 2 | setWindowSize | 1020x951 |
    # #self.driver.maximize_window()
    # # 3 | executeScript | return Math.floor(Math.random() * (5000 - 1000 + 1) + 1000); | randomPause
    # time.sleep(random.randint(1, 5))
    # # 6 | click | xpath=//input[@id='fm-login-id'] |
    # self.driver.find_element(By.XPATH, "//input[@id=\'fm-login-id\']").click()
    # # 7 | executeScript | return Math.floor(Math.random() * (5000 - 1000 + 1) + 1000); | randomPause
    # time.sleep(random.randint(1, 5))
    # # 9 | type | xpath=//input[@id='fm-login-id'] | username
    # self.driver.find_element(By.XPATH, "//input[@id=\'fm-login-id\']").send_keys("username")
    # # 10 | executeScript | return Math.floor(Math.random() * (5000 - 1000 + 1) + 1000); | randomPause
    # time.sleep(random.randint(1, 5))
    # # 12 | click | xpath=//input[@name='fm-login-password'] |
    # self.driver.find_element(By.XPATH, "//input[@name=\'fm-login-password\']").click()
    # # 13 | executeScript | return Math.floor(Math.random() * (5000 - 1000 + 1) + 1000); | randomPause
    # time.sleep(random.randint(1, 5))
    # # 15 | type | xpath=//input[@name='fm-login-password'] | password
    # self.driver.find_element(By.XPATH, "//input[@name=\'fm-login-password\']").send_keys("password")
    # # 16 | executeScript | return Math.floor(Math.random() * (5000 - 1000 + 1) + 1000); | randomPause
    time.sleep(random.randint(1, 5))
    self.driver.find_element(By.XPATH, "//div[@class=\'fm-btn\']/button").click()
    time.sleep(random.randint(1, 5))
    self.driver.get("https://nike.tmall.com/search.htm")
    WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located(
      (By.XPATH, "//p[contains(@class,\"ui-page\")]/b[contains(@class,\"len\")]")))
    self.vars["loopIndexString"] = self.driver.find_element(By.XPATH, "//p[contains(@class,\"ui-page\")]/b[contains(@class,\"len\")]").text
    self.vars["loopIndex"] = self.driver.execute_script("return arguments[0].split(\'/\')[1].trim()", self.vars["loopIndexString"])
    print("number of all pages->{}".format(self.vars["loopIndex"]))
    self.vars["i"] = self.driver.execute_script("return 1")

    while self.driver.execute_script("return (arguments[0]<=arguments[1])", self.vars["i"],self.vars["loopIndex"]):

      time.sleep(random.randint(1, 5))

      self.driver.get("https://nike.tmall.com/search.htm")

      WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@class=\"pagination\"]/form/input[@type=\"text\"]")))

      time.sleep(random.randint(1, 5))

      input_element = self.driver.find_element(By.XPATH, "//div[@class=\"pagination\"]/form/input[@type=\"text\"]")
      input_element.clear()
      input_element.send_keys(self.vars["i"])
      self.driver.find_element(By.XPATH, "//div[@class=\"pagination\"]/form/button").click()

      WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[@class=\"J_TItems\"]/div[contains(@class,\"pagination\")]/preceding-sibling::div/dl")))
      self.vars["onePageItemNumber"] = len(self.driver.find_elements(By.XPATH, "//div[@class=\"J_TItems\"]/div[contains(@class,\"pagination\")]/preceding-sibling::div/dl"))
      print("{}".format(self.vars["onePageItemNumber"]))

      time.sleep(random.randint(2, 3))

      self.vars["onePageHref"] = self.driver.execute_script("var onePageHref = [];  var xpathExpression = \"//div[@class='J_TItems']/div[contains(@class,'pagination')]/preceding-sibling::div/dl\"; var result = document.evaluate(xpathExpression, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);  for (var i = 0; i < result.snapshotLength; i++) {     var element = result.snapshotItem(i);     var anchorElement = element.querySelector(\'dt a\');      if (anchorElement) {         var hrefValue = anchorElement.getAttribute(\'href\');         onePageHref.push(hrefValue);     } }  return onePageHref;")
      print("number of items every page ${onePageHref.length}")

      collection = self.vars["onePageHref"]
      for entry in collection:
        self.vars["oneHref"] = entry

        time.sleep(random.randint(1, 5))

        self.driver.get("https://"+self.vars["oneHref"])
        print("item->{}".format(self.vars["oneHref"]))

        WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[contains(@class,\"ItemHeader--root\")]/h1")))
        self.vars["itemTitle"] = self.driver.find_element(By.XPATH, "//div[contains(@class,\"ItemHeader--root\")]/h1").text
        print("title->{}".format(self.vars["itemTitle"]))

        WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[contains(@class,\"ItemHeader--subTitle\")]/span")))
        self.vars["saleString"] = self.driver.find_element(By.XPATH, "//div[contains(@class,\"ItemHeader--subTitle\")]/span").text
        self.vars["itemSale"] = self.driver.execute_script("return arguments[0].split(' ')[1]", self.vars["saleString"])
        print("sale->{}".format(self.vars["itemSale"]))

        WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[contains(@class,'Price--root')]//span[contains(@class,'Price--priceText')]")))
        #self.vars["itemPrice"] = self.driver.find_element(By.XPATH, "//div[contains(@class,'Price--root')]//span[contains(@class,'Price--priceText')]").text
        element = self.driver.find_element(By.XPATH,"//div[contains(@class,'Price--root')]//span[contains(@class,'Price--priceText')]")
        self.vars["itemPrice"]  = self.driver.execute_script("return arguments[0].textContent;", element)
        print("price->￥{}".format(self.vars["itemPrice"]))

        #insert item
        item_id=self.insert_into_item(self.vars["oneHref"],self.vars["itemTitle"],self.vars["itemSale"],self.vars["itemPrice"])

        time.sleep(random.randint(1, 5))

        WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[contains(@class,\"ItemDetail--attrs\")]//span[contains(@class,\"Attrs--attr\")]")))
        self.vars["detailOfItem"] = self.driver.execute_script("var xpathExpression = \"//div[contains(@class,'ItemDetail--attrs')]//span[contains(@class,'Attrs--attr')]\";     var xpathResult = document.evaluate(xpathExpression, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);     var detailOfItem = [];      for (var i = 0; i < xpathResult.snapshotLength; i++) {         var element = xpathResult.snapshotItem(i);         detailOfItem.push(element.textContent.trim());     }      return detailOfItem;")
        collection = self.vars["detailOfItem"]

        #insert detail
        self.insert_into_details(item_id,collection)

        for detail in collection:
          self.vars["detail"] = detail
          print("detail->{}".format(self.vars["detail"]))

        time.sleep(random.randint(1, 5))

        WebDriverWait(self.driver, 30).until(expected_conditions.presence_of_element_located((By.XPATH, "//div[contains(@class,'Tabs--title')][2]/span")))
        self.driver.find_element(By.XPATH, "//div[contains(@class,'Tabs--title')][2]/span").click()

        time.sleep(random.randint(1, 5))

        try:

          #有评论的页面
          WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.XPATH, "//div[contains(@class,'Tabs--title')][2]/span"))).click()
          self.vars["commentOfItem "] = self.driver.execute_script(
            "var commentOfItem = [];  var xpathExpression = \"//div[contains(@class,'Comment--content')]\"; var result = document.evaluate(xpathExpression, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null);  for (var i = 0; i < result.snapshotLength; i++) {     var element = result.snapshotItem(i);     var textContent = element.textContent.trim();     commentOfItem .push(textContent); }  return commentOfItem ;")
          collection = self.vars["commentOfItem "]

          #insert comment
          self.insert_into_comment(item_id,collection)

          print("comment number {}".format(len(collection)))
          for comment in collection:
            self.vars["comment"] = comment
            print("comment->{}".format(self.vars["comment"]))

        except TimeoutException :
          try:

            #没有评论的页面
            WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located(
              (By.XPATH, "//div[contains(@class,'Comments--empty')]")))

          except TimeoutException :

            print("Timeout")

      self.vars["i"] = self.driver.execute_script("return arguments[0]+1", self.vars["i"])
      time.sleep(random.randint(1, 5))

